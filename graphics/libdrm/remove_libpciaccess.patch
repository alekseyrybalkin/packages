diff --git a/intel/intel_bufmgr.c b/intel/intel_bufmgr.c
index 68d97c0e..bef857ab 100644
--- a/intel/intel_bufmgr.c
+++ b/intel/intel_bufmgr.c
@@ -32,9 +32,6 @@
 #include <errno.h>
 #include <drm.h>
 #include <i915_drm.h>
-#ifndef __ANDROID__
-#include <pciaccess.h>
-#endif
 #include "libdrm_macros.h"
 #include "intel_bufmgr.h"
 #include "intel_bufmgr_priv.h"
@@ -324,33 +321,6 @@ drm_intel_get_pipe_from_crtc_id(drm_intel_bufmgr *bufmgr, int crtc_id)
 	return -1;
 }
 
-#ifndef __ANDROID__
-static size_t
-drm_intel_probe_agp_aperture_size(int fd)
-{
-	struct pci_device *pci_dev;
-	size_t size = 0;
-	int ret;
-
-	ret = pci_system_init();
-	if (ret)
-		goto err;
-
-	/* XXX handle multiple adaptors? */
-	pci_dev = pci_device_find_by_slot(0, 0, 2, 0);
-	if (pci_dev == NULL)
-		goto err;
-
-	ret = pci_device_probe(pci_dev);
-	if (ret)
-		goto err;
-
-	size = pci_dev->regions[2].size;
-err:
-	pci_system_cleanup ();
-	return size;
-}
-#else
 static size_t
 drm_intel_probe_agp_aperture_size(int fd)
 {
@@ -358,7 +328,6 @@ drm_intel_probe_agp_aperture_size(int fd)
 	fprintf(stderr, "%s: Mappable aperture size hardcoded to 64MiB\n", __func__);
 	return 64 * 1024 * 1024;
 }
-#endif
 
 drm_public int
 drm_intel_get_aperture_sizes(int fd, size_t *mappable, size_t *total)
diff --git a/intel/meson.build b/intel/meson.build
index 5fa06c28..75970f36 100644
--- a/intel/meson.build
+++ b/intel/meson.build
@@ -29,7 +29,7 @@ libdrm_intel = library(
   ],
   include_directories : [inc_root, inc_drm],
   link_with : libdrm,
-  dependencies : [dep_pciaccess, dep_pthread_stubs, dep_rt, dep_valgrind, dep_atomic_ops],
+  dependencies : [dep_pthread_stubs, dep_rt, dep_valgrind, dep_atomic_ops],
   c_args : libdrm_c_args,
   version : '1.0.0',
   install : true,
diff --git a/meson.build b/meson.build
index 5922fb61..1d3da701 100644
--- a/meson.build
+++ b/meson.build
@@ -237,7 +237,6 @@ endforeach
 libdrm_c_args = warn_c_args + ['-fvisibility=hidden']
 
 
-dep_pciaccess = dependency('pciaccess', version : '>= 0.10', required : with_intel)
 dep_cunit = dependency('cunit', version : '>= 2.1', required : false)
 _cairo_tests = get_option('cairo-tests')
 if _cairo_tests != 'false'
