diff --git a/src/FbTk/FbWindow.cc b/src/FbTk/FbWindow.cc
index 1930d4e..357a26f 100644
--- a/src/FbTk/FbWindow.cc
+++ b/src/FbTk/FbWindow.cc
@@ -31,16 +31,19 @@
 #include <X11/Xutil.h>
 #include <X11/Xatom.h>
 
-#ifdef HAVE_CASSERT
-  #include <cassert>
-#else
-  #include <assert.h>
-#endif
-
+#include <cassert>
 #include <limits>
 
 namespace FbTk {
 
+Window FbWindow::rootWindow(Display* dpy, Drawable win) {
+    union { int i; unsigned int ui; } ignore;
+    Window root = None;
+    XGetGeometry(dpy, win, &root, &ignore.i, &ignore.i, &ignore.ui, &ignore.ui, &ignore.ui, &ignore.ui);
+    return root;
+}
+
+
 FbWindow::FbWindow():
     FbDrawable(),
     m_parent(0), m_screen_num(0), m_window(0),
diff --git a/src/FbTk/FbWindow.hh b/src/FbTk/FbWindow.hh
index 4b6b02f..5501d88 100644
--- a/src/FbTk/FbWindow.hh
+++ b/src/FbTk/FbWindow.hh
@@ -24,15 +24,11 @@
 
 #include "FbDrawable.hh"
 #include "FbString.hh"
+
 #include <memory>
 #include <string>
 #include <set>
-
-#ifdef HAVE_CMATH
-  #include <cmath>
-#else
-  #include <math.h>
-#endif
+#include <cmath>
 
 namespace FbTk {
 
@@ -54,8 +50,10 @@ class FbWindowRenderer;
  */
 class FbWindow: public FbDrawable {
 public:
-    FbWindow();
 
+    static Window rootWindow(Display* dpy, Drawable win);
+
+    FbWindow();
     FbWindow(const FbWindow &win_copy);
 
     FbWindow(int screen_num,
diff --git a/src/fluxbox.cc b/src/fluxbox.cc
index 5771cb3..01f0082 100644
--- a/src/fluxbox.cc
+++ b/src/fluxbox.cc
@@ -81,21 +81,9 @@
 
 // system headers
 
-#ifdef HAVE_CSTDIO
-  #include <cstdio>
-#else
-  #include <stdio.h>
-#endif
-#ifdef HAVE_CSTDLIB
-  #include <cstdlib>
-#else
-  #include <stdlib.h>
-#endif
-#ifdef HAVE_CSTRING
-  #include <cstring>
-#else
-  #include <string.h>
-#endif
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
@@ -988,10 +976,15 @@ void Fluxbox::attachSignals(WinClient &winclient) {
 
 BScreen *Fluxbox::searchScreen(Window window) {
 
+    Window window_root = FbTk::FbWindow::rootWindow(display(), window);
+    if (window_root == None) {
+        return 0;
+    }
+
     ScreenList::iterator it = m_screen_list.begin();
     ScreenList::iterator it_end = m_screen_list.end();
     for (; it != it_end; ++it) {
-        if (*it && (*it)->rootWindow() == window)
+        if (*it && (*it)->rootWindow() == window_root)
             return *it;
     }
 
