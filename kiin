#!/bin/bash

usage() {
  echo "usage:"
  echo "  kiin make"
  echo "  kiin gen-db"
  echo "  kiin list-dups"
  echo "  kiin who-owns </full/path/to/file>"
  echo "  kiin who-uses-dir </full/path/to/dir>"
  echo "  kiin check-conflicts </path/to/package.xz>"
  echo "  kiin list-files </path/to/package.xz>"
  echo "  kiin list-dirs </path/to/package.xz>"
  echo "  kiin install </path/to/package.xz>"
  echo "  kiin ls"
  echo "  kiin uninstall <package>"
  echo "  kiin db-list-files <package>"
  echo "  kiin db-list-dirs <package>"
  echo "  kiin list-untracked <dir>"
  echo "  kiin check-system-integrity"
  echo "  kiin list-missing"
}

if [ -z $1 ]; then
  usage
  exit 0
fi

case $1 in
  "install" | "uninstall" | "list-untracked" | "check-system-integrity" | "list-missing")
    if [ `whoami` != 'root' ]; then
      echo "you must be root to run kiin $1"
      exit 0
    fi
    ;;
esac
case $1 in
  "who-owns" | "who-uses-dir" | "check-conflicts" | "list-files" | "list-dirs" | "install" | "uninstall" | "db-list-files" | "db-list-dirs" | "list-untracked")
    if [ -z $2 ]; then
      echo "usage:" && usage | grep $1
      exit 0
    fi
    ;;
esac
case $1 in
  "uninstall" | "db-list-files" | "db-list-dirs")
    count=`kiin ls | grep $2 | wc -l`
    if [ $count = 0 ]; then
      echo "$2 is not installed"
      exit 0
    fi
    if [ $count -gt 1 ]; then
      echo "$2 is ambiguous (" `kiin ls | grep $2` ")"
      exit 0
    fi
    package=`kiin ls | grep $2`
    ;;
esac

if [ $1 == "make" ]; then
  set -e
  if [ ! -f ./package.sh ]; then
    echo "no package.sh found, goodbye."
    exit 0
  fi
  location=`pwd`
  . ./package.sh

  pkgdir=${location}/kiin-dest
  if [[ ${srctar} ]]; then
    echo "unpacking ${srctar}..."
    tar xf ${srctar}
    cd ${srcdir}
  fi
  kiin_make

  maker=${location}/kiin_maker.sh
  cat > ${maker} << "EOF"
#!/bin/sh
cd ${location}
. ./package.sh
mkdir ${pkgdir}
if [[ ${srcdir} ]]; then
  cd ${srcdir}
fi
kiin_install
fix_symlinks.py

# fix /usr/share/info/dir
rm -fv ${pkgdir}/usr/share/info/dir
if [ -e ${pkgdir}/var ]; then
  echo " *** WARNING ***: package tries to use /var"
fi

# fix /usr/lib/perl5/5.16.1/x86_64-linux/perllocal.pod
if [ -e ${pkgdir}/usr/lib/perl5/5.16.1/x86_64-linux/perllocal.pod ]; then
  mv -v ${pkgdir}/usr/lib/perl5/5.16.1/x86_64-linux/perllocal.pod{,.$pkgname.podpart}
fi

cd ${location}
echo creating xz archive...
tar cfa kiin.${pkgname}-${pkgver}.tar.xz kiin-dest
EOF
  chmod +x ${maker}
  location=${location} srcdir=${srcdir} pkgdir=${pkgdir} \
    pkgname=${pkgname} pkgver=${pkgver} fakeroot ${maker}
  rm ${maker}
  rm -rf ${pkgdir}
  if [[ ${srcdir} ]]; then
    rm -rf ${srcdir}
  fi
  echo "kiin: all done!"
  exit 0
fi

if [ $1 == 'gen-db' ]; then
  db_manager.py gen-db
  exit 0
fi

if [ $1 == 'list-dups' ]; then
  echo "select * from (select count(id) as cnt, name from file \
    where permissions not like 'd%' group by name \
    order by cnt desc) where cnt > 1;" | sqlite3 /sources/kiin-db/kiin.sqlite3 \
    | sed 's/|/\ \ /g'
  exit 0
fi

if [ $1 == 'who-owns' ]; then
  echo "select name,version from package where id in \
    (select distinct package_id from file where name = '$2' \
    and permissions not like 'd%');" | sqlite3 /sources/kiin-db/kiin.sqlite3 \
    | sed 's/|/\-/g' | sort
  exit 0
fi

if [ $1 == 'who-uses-dir' ]; then
  dir=`echo $2 | sed 's/\/$//g'`
  echo "select name,version from package where id in \
    (select distinct package_id from file where name = '$dir/' \
    and permissions like 'd%');" | sqlite3 /sources/kiin-db/kiin.sqlite3 \
    | sed 's/|/\-/g' | sort
  exit 0
fi

if [ $1 == 'check-conflicts' ]; then
  if [ ! -f $2 ]; then
    echo "$2 does not exist"
    exit 0
  fi
  for i in `kiin list-files $2`; do
    if [ -e $i ]; then
      echo $i already exists on filesystem
    fi
  done
  for i in `kiin list-dirs $2`; do
    i=`echo $i | sed 's/\/$//g'`
    if [ -e $i ]; then
      if [ ! -d $i ]; then
        echo "$i already exists on filesystem and is not a dir"
      fi
    fi
  done
  exit 0
fi

if [ $1 == 'list-files' ]; then
  if [ ! -f $2 ]; then
    echo "$2 does not exist"
    exit 0
  fi
  tar -tvf $2 | sed 's/kiin-dest//g' | tr -s ' ' | grep -E '^[-lpscbh].*' | cut -d ' ' --fields=6 | sort
  exit 0
fi

if [ $1 == 'list-dirs' ]; then
  if [ ! -f $2 ]; then
    echo "$2 does not exist"
    exit 0
  fi
  tar -tvf $2 | sed 's/kiin-dest//g' | tr -s ' ' | grep -E '^d.*' | cut -d ' ' --fields=6 | sort
  exit 0
fi

if [ $1 == 'install' ]; then
  if [ ! -f $2 ]; then
    echo "$2 does not exist"
    exit 0
  fi
  if [ `kiin check-conflicts $2 | wc -l` != '0' ]; then
    echo "where are conflicts, not installing"
    exit 0
  fi
  tmpdir=/tmp/kiin/`uuidgen`
  mkdir -p $tmpdir
  tar xf $2 -C $tmpdir
  for dir in `kiin list-dirs $2`; do
    if [ ! -d $dir ]; then
      prototype=$tmpdir/kiin-dest$dir
      mkdir -pv $dir
      chmod `stat -c %a $prototype` $dir
      #echo "chown `stat -c %U $prototype`:`stat -c %G $prototype` $dir"
    fi
  done
  for file in `kiin list-files $2`; do
    prototype=$tmpdir/kiin-dest$file
    cp -av $prototype $file
  done

  # recreate /usr/share/info/dir
  cd /usr/share/info
  rm -v dir
  for f in *; do
    install-info $f dir 2>/dev/null
  done

  # fix /usr/lib/perl5/5.16.1/x86_64-linux/perllocal.pod
  cd /usr/lib/perl5/5.16.1/x86_64-linux
  if [ -e perllocal.pod ]; then
    rm -v perllocal.pod
  fi
  for f in `find . -name "*.podpart"`; do
    cat $f >> perllocal.pod
  done
  exit 0
fi

if [ $1 == 'ls' ]; then
  echo "select name,version from package;" \
    | sqlite3 /sources/kiin-db/kiin.sqlite3 \
    | sed 's/|/\-/g'
  exit 0
fi

if [ $1 == 'uninstall' ]; then
  uninstaller=/tmp/kiin/uninstaller-`uuidgen`
  mkdir -p /tmp/kiin
  for file in `kiin db-list-files $package`; do
    kiin db-list-files filesystem | grep -q -E "^$file$"
    if [ ! $? -eq 0 ]; then
      if [ $file != "/usr/share/info/dir" ]; then
        owners=`kiin who-owns $file`
        owner_count=`echo $owners | wc -w`
        if [ $owner_count != 1 ]; then
          echo $file owned by $owner_count owners: $owners
          exit 0
        fi
        if [ "$owners" != $package ]; then
          echo "$package is not owner of $file"
          exit 0
        fi
        echo "rm $file" | tee -a $uninstaller
      fi
    fi
  done
  for dir in `kiin db-list-dirs $package \
    | awk '{ print length, $0 }' | sort -n -r | cut -d " " --fields=2`; do
    kiin db-list-dirs filesystem | grep -q -E "^$dir$"
    if [ ! $? -eq 0 ]; then
      users=`kiin who-uses-dir $dir`
      user_count=`echo $users | wc -w`
      [ $user_count = 1 ] && [ $users = $package ] && {
        echo "rm -r $dir" | tee -a $uninstaller
      }
    fi
  done
  chmod +x $uninstaller
  echo ""
  echo "uninstall script is $uninstaller (check it and run it as root)"
  echo "think you would like to run this as user after that:"
  echo "mv /sources/installed/kiin.$package.tar.xz /sources/uninstalled"
  echo "think you would like to run kiin gen-db as user after that, too"
  exit 0
fi

if [ $1 == 'db-list-files' ]; then
  package=`echo $package | sed 's/\-[^a-z]*$//g'`
  echo "select name from file where package_id in \
    (select id from package where name='$package') \
    and permissions not like 'd%';" \
    | sqlite3 /sources/kiin-db/kiin.sqlite3 | sort
  exit 0
fi

if [ $1 == 'db-list-dirs' ]; then
  package=`echo $package | sed 's/\-[^a-z]*$//g'`
  echo "select name from file where package_id in \
    (select id from package where name='$package') \
    and permissions like 'd%';" \
    | sqlite3 /sources/kiin-db/kiin.sqlite3 | sort
  exit 0
fi

if [ $1 == 'list-untracked' ]; then
  if [ ! -d $2 ]; then
    echo "dir $2 does not exist"
    exit 0
  fi
  dir=`echo $2 | sed 's/\/$//g'`
  find $dir ! -type d | db_manager.py list-untracked
  exit 0
fi

if [ $1 == 'check-system-integrity' ]; then
  dirs=
  for i in `ls /`; do
    if [ ! -z "`kiin who-uses-dir /$i | grep -v filesystem`" ]; then
      dirs="$dirs /$i"
    fi
  done
  echo " * searching for untracked files on filesystem..."
  echo " * used system dirs:" $dirs
  for i in $dirs; do
    kiin list-untracked $i
  done
  echo " * searching for missing package files..."
  kiin list-missing
  echo " * searching for duplications in package db..."
  kiin list-dups
  exit 0
fi

if [ $1 == 'list-missing' ]; then
  for package in `kiin ls`; do
    for file in `kiin db-list-files $package`; do
      if [ ! -e $file ]; then
        echo "$file is missing ($package)"
      fi
    done
  done
  exit 0
fi

usage
